[{"D:\\tracker_front\\src\\index.js":"1","D:\\tracker_front\\src\\App.js":"2","D:\\tracker_front\\src\\reportWebVitals.js":"3","D:\\tracker_front\\src\\routes\\index.js":"4","D:\\tracker_front\\src\\pages\\user.js":"5","D:\\tracker_front\\src\\pages\\admin.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":978,"mtime":1608275832008,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":511,"mtime":1608486919043,"results":"11","hashOfConfig":"8"},{"size":11795,"mtime":1608534319333,"results":"12","hashOfConfig":"8"},{"size":4623,"mtime":1608526133240,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1vyx5kb",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\tracker_front\\src\\index.js",[],["28","29"],"D:\\tracker_front\\src\\App.js",[],"D:\\tracker_front\\src\\reportWebVitals.js",[],"D:\\tracker_front\\src\\routes\\index.js",[],"D:\\tracker_front\\src\\pages\\user.js",["30","31","32","33","34","35","36","37","38","39","40","41","42","43"],"import { Button, Checkbox, Container, FormControl, FormControlLabel, InputLabel, MenuItem, Select, TextField, IconButton  } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport Table from '@material-ui/core/Table';  \r\nimport TableBody from '@material-ui/core/TableBody';  \r\nimport TableCell from '@material-ui/core/TableCell';  \r\nimport TableContainer from '@material-ui/core/TableContainer';  \r\nimport TableHead from '@material-ui/core/TableHead';  \r\nimport TableRow from '@material-ui/core/TableRow';  \r\nimport Paper from '@material-ui/core/Paper';  \r\nimport { PureComponent } from \"react\";\r\nimport './common.css';\r\nimport axios from 'axios' \r\nimport moment from \"moment\";\r\n\r\nclass User extends PureComponent {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state= {\r\n            description: '',\r\n            project: 0,\r\n            isBillable: false,\r\n            clockedTime: 0,\r\n            userId: null,\r\n            istracking: false,\r\n            startTime : null,\r\n            endTime: null,\r\n            tasks: [],\r\n            projects: [],\r\n            errors: {\r\n                description: '',\r\n                project: ''\r\n            },\r\n            user_id: 4\r\n        }\r\n        // this.columns = [\r\n        //     { field: 'description', headerName: 'Description', width: 300 },\r\n        //     { field: 'Project.project_name', headerName: 'Project', width: 300 },\r\n        //     { field: 'start_datetime', headerName: 'Start Time', width: 300 },\r\n        //     { field: 'end_datetime', headerName: 'End Time', width: 300 },\r\n        //     {\r\n        //       field: 'is_billable',\r\n        //       headerName: 'Billable',\r\n        //       width: 90,\r\n        //     },\r\n        //     {\r\n        //       field: 'clocked_time',\r\n        //       headerName: 'Clocked Time',\r\n        //       width: 100\r\n        //     }\r\n        //   ];\r\n          \r\n    }\r\n\r\n    async componentDidMount() {\r\n        var projectList= await this.GetProjectList()\r\n        var taskList= await this.GetTaskList()\r\n        this.setState({\r\n            tasks: taskList.data,\r\n            projects: projectList.data\r\n        })\r\n        \r\n        let startTime= localStorage.getItem('startTime')\r\n        let currentTime= new Date().getTime();\r\n        let clocked_time = Math.floor((currentTime - Number(startTime))/1000)\r\n        \r\n        if(startTime){\r\n            let d = new Date()\r\n            d.setTime(Number(startTime))\r\n            this.setState({\r\n                startTime: d,\r\n                clockedTime: clocked_time,\r\n                istracking: true\r\n            })\r\n            setTimeout(() => {\r\n                this.startTimer()\r\n            }, 500);\r\n            \r\n        }\r\n       \r\n    }\r\n\r\n    GetTaskList = ()=>{\r\n        return axios.get(`http://localhost:3000/task?user_id=${this.state.user_id}`)\r\n    }\r\n\r\n    GetProjectList = ()=>{\r\n        return axios.get('http://localhost:3000/project')\r\n    }\r\n\r\n    CreateTask = (payLoad)=>{\r\n        return axios.post('http://localhost:3000/task',payLoad)\r\n    }\r\n    \r\n    DeleteTask = (id) => {\r\n        return axios.delete(`http://localhost:3000/task/${id}`)\r\n    }\r\n\r\n    formatTime = (timer) => {\r\n        const getSeconds = `0${(timer % 60)}`.slice(-2)\r\n        const minutes = `${Math.floor(timer / 60)}`\r\n        const getMinutes = `0${minutes % 60}`.slice(-2)\r\n        const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\r\n      \r\n        return `${getHours} : ${getMinutes} : ${getSeconds}`\r\n      }\r\n      \r\n\r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        var value;\r\n       \r\n        if(name == \"isBillable\"){\r\n            value = event.target.checked;\r\n        }else{\r\n            value = event.target.value;\r\n        }\r\n        let state= this.state\r\n        let errors= this.state.errors\r\n        state[name]= value\r\n        if(name == \"description\" && value !== ''){\r\n            errors[name]= ''\r\n        }\r\n        if(name == \"project\" && value !== 0){\r\n            errors[name]= ''\r\n        }\r\n        state.errors= errors\r\n        this.setState(state)\r\n    }\r\n\r\n    handleDelete = async (id) => {\r\n        var result = await this.DeleteTask(id)\r\n        console.log(result)\r\n        if(result && result.status === 200){\r\n            let taskList= await this.GetTaskList()\r\n            this.setState({\r\n                tasks: taskList.data\r\n            })\r\n        }\r\n    }\r\n\r\n    startTimer () {\r\n        this.intervalID= setInterval(() => {\r\n            let timer = this.state.clockedTime + 1 ;\r\n            this.setState({\r\n                clockedTime: timer\r\n            })\r\n        }, 1000);\r\n    }\r\n\r\n    handleSubmit= async () => {\r\n        if(!this.state.istracking){\r\n            let currentTime = new Date();\r\n            localStorage.setItem(\"startTime\", currentTime.getTime())\r\n            this.setState({\r\n                istracking: true,\r\n                startTime: currentTime\r\n            })\r\n          this.startTimer()\r\n          setTimeout(() => {\r\n        }, 500);\r\n        }else{\r\n            let description_error = '';\r\n            let project_error = '';\r\n\r\n            description_error= this.state.description == '' ? 'Add description' : ''\r\n            project_error= this.state.project == 0 ? 'Select Project' : ''\r\n\r\n            this.setState({\r\n                errors: {\r\n                    description: description_error,\r\n                    project: project_error\r\n                }\r\n            })\r\n\r\n            if(this.state.description == '' || this.state.project == 0){\r\n                return false;\r\n            }\r\n            clearInterval(this.intervalID)\r\n            let currentTime = new Date();\r\n            this.setState({\r\n                istracking: false,\r\n                endTime: currentTime\r\n            })\r\n            localStorage.clear()\r\n            setTimeout( async () => {\r\n                let payLoad= {\r\n                    \"description\": this.state.description,\r\n                    \"project_id\": this.state.project,\r\n                    \"start_datetime\": this.state.startTime,\r\n                    \"end_datetime\": this.state.endTime,\r\n                    \"clocked_time\": this.state.clockedTime,\r\n                    \"is_billable\": this.state.isBillable,\r\n                    \"user_id\": this.state.user_id\r\n                }\r\n               let result = await this.CreateTask(payLoad);\r\n               if(result.status && result.status == 201){\r\n                let taskList= await this.GetTaskList()\r\n                this.setState({\r\n                    tasks: taskList.data,\r\n                    clockedTime: 0,\r\n                    project: 0,\r\n                    description: ''\r\n                })\r\n               }\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    render() {\r\n     let description= this.state.description\r\n     let project= this.state.project\r\n     let isBillable= this.state.isBillable\r\n     let clockedTime= this.state.clockedTime\r\n        return (\r\n            <div className=\"main-wrapper\">\r\n                <Container>\r\n                <div className=\"head-wrapper\">\r\n                    <div className=\"field-wrapper\">\r\n                        <TextField label=\"Description\" name=\"description\" onChange={(e) => this.handleChange(e)} style={{ marginRight: '1rem' }} />\r\n                        {this.state.errors.description != '' && (\r\n                        <span className=\"error\">\r\n                            {this.state.errors.description}\r\n                        </span>)}\r\n                    </div>\r\n                    \r\n                    <FormControl className=\"select-wrapper\">\r\n                        <InputLabel id=\"demo-simple-select-label\">Project</InputLabel>\r\n                        <Select labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" name=\"project\" onChange={(e) => this.handleChange(e)}>\r\n                        {\r\n                            this.state.projects.map((project, index) => {\r\n                                return <MenuItem key={index} value={project.id}>{project.project_name}</MenuItem>\r\n                            })\r\n                        }\r\n                        </Select>\r\n                        {this.state.errors.project != '' && (\r\n                        <span className=\"error\">\r\n                            {this.state.errors.project}\r\n                        </span>)}\r\n                    </FormControl>\r\n                    <FormControlLabel\r\n                        control={\r\n                        <Checkbox\r\n                            // checked={isBillable}\r\n                            onChange={(e) => this.handleChange(e)}\r\n                            name=\"isBillable\"\r\n                            color=\"primary\"\r\n                        />\r\n                        }\r\n                        label=\"Billable\"\r\n                    />\r\n                    <p>{this.formatTime(clockedTime)}</p>\r\n                    <Button color=\"primary\" onClick={ () => this.handleSubmit()}>{this.state.istracking ? 'Stop' : 'Start'}</Button>\r\n                </div>\r\n                </Container>\r\n            \r\n            {/* <div style={{ height: 800, width: '80%', top: '200px' }}>\r\n                <DataGrid rows={rows} columns={this.columns} pageSize={20} checkboxSelection />\r\n            </div> */}\r\n            \r\n                <TableContainer className=\"table-container\" component={Paper}>  \r\n                    <Table stickyHeader  aria-label=\"sticky table\">  \r\n                        <TableHead>\r\n                            <TableRow>  \r\n                            <TableCell align=\"left\">Description</TableCell>  \r\n                            <TableCell align=\"left\">Project</TableCell>  \r\n                            <TableCell align=\"left\">Start Time</TableCell>  \r\n                            <TableCell align=\"left\">End Time</TableCell>  \r\n                            <TableCell align=\"left\">Clocked Time</TableCell>  \r\n                            <TableCell align=\"left\">Billable</TableCell>  \r\n                            <TableCell align=\"left\" ></TableCell>  \r\n                            </TableRow>  \r\n                        </TableHead>\r\n                        <TableBody>  \r\n                            {  \r\n                            this.state.tasks.map((task, index) => {  \r\n                                return <TableRow key={index}>  \r\n                                            <TableCell component=\"th\" scope=\"row\">{task.description}</TableCell>  \r\n                                            <TableCell align=\"left\">{task.Project ? task.Project.project_name : ''}{(task.Project && task.Project.Client) ? ' - '+task.Project.Client.client_name : ''}</TableCell>  \r\n                                            <TableCell align=\"left\">{moment(task.start_datetime).format('lll')}</TableCell>  \r\n                                            <TableCell align=\"left\">{moment(task.end_datetime).format('lll')}</TableCell>  \r\n                                            <TableCell align=\"left\">{this.formatTime(task.clocked_time)}</TableCell>\r\n                                            <TableCell align=\"left\">{task.is_billable ? 'Y' : 'N'}</TableCell>  \r\n                                            <TableCell align=\"left\"><IconButton aria-label=\"delete\" onClick={ () => this.handleDelete(task.id) }><DeleteIcon /></IconButton></TableCell>  \r\n                                        </TableRow>  \r\n                            })  \r\n                            }  \r\n                        </TableBody>  \r\n                    </Table>  \r\n                </TableContainer> \r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default User","D:\\tracker_front\\src\\pages\\admin.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":3,"column":10,"nodeType":"50","messageId":"51","endLine":3,"endColumn":18},{"ruleId":"52","severity":1,"message":"53","line":115,"column":17,"nodeType":"54","messageId":"55","endLine":115,"endColumn":19},{"ruleId":"52","severity":1,"message":"53","line":123,"column":17,"nodeType":"54","messageId":"55","endLine":123,"endColumn":19},{"ruleId":"52","severity":1,"message":"53","line":126,"column":17,"nodeType":"54","messageId":"55","endLine":126,"endColumn":19},{"ruleId":"52","severity":1,"message":"53","line":168,"column":55,"nodeType":"54","messageId":"55","endLine":168,"endColumn":57},{"ruleId":"52","severity":1,"message":"53","line":169,"column":47,"nodeType":"54","messageId":"55","endLine":169,"endColumn":49},{"ruleId":"52","severity":1,"message":"53","line":178,"column":39,"nodeType":"54","messageId":"55","endLine":178,"endColumn":41},{"ruleId":"52","severity":1,"message":"53","line":178,"column":67,"nodeType":"54","messageId":"55","endLine":178,"endColumn":69},{"ruleId":"52","severity":1,"message":"53","line":199,"column":50,"nodeType":"54","messageId":"55","endLine":199,"endColumn":52},{"ruleId":"48","severity":1,"message":"56","line":213,"column":10,"nodeType":"50","messageId":"51","endLine":213,"endColumn":21},{"ruleId":"48","severity":1,"message":"57","line":214,"column":10,"nodeType":"50","messageId":"51","endLine":214,"endColumn":17},{"ruleId":"48","severity":1,"message":"58","line":215,"column":10,"nodeType":"50","messageId":"51","endLine":215,"endColumn":20},{"ruleId":"52","severity":1,"message":"59","line":223,"column":56,"nodeType":"54","messageId":"55","endLine":223,"endColumn":58},{"ruleId":"52","severity":1,"message":"59","line":238,"column":52,"nodeType":"54","messageId":"55","endLine":238,"endColumn":54},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'DataGrid' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'description' is assigned a value but never used.","'project' is assigned a value but never used.","'isBillable' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]